import os
import pickle

import mediapipe as mp
import cv2

# Initialize Mediapipe Hands solution
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)

DATA_DIR = './data'

# Initialize lists to store data and labels
data = []
labels = []

# Check if DATA_DIR exists
if not os.path.exists(DATA_DIR):
    print(f"Error: The directory {DATA_DIR} does not exist.")
    exit()

# Loop through each class directory in DATA_DIR
for dir_ in os.listdir(DATA_DIR):
    class_dir = os.path.join(DATA_DIR, dir_)

    # Check if it's a directory
    if not os.path.isdir(class_dir):
        print(f"Skipping {class_dir}, not a directory.")
        continue

    # Loop through each image in the class directory
    for img_path in os.listdir(class_dir):
        data_aux = []
        x_ = []
        y_ = []

        # Construct full image path
        img_file = os.path.join(class_dir, img_path)
        
        # Read the image
        img = cv2.imread(img_file)
        
        # Ensure the image was loaded successfully
        if img is None:
            print(f"Error: Failed to load image {img_file}. Skipping.")
            continue
        
        # Convert the image to RGB
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Process the image with Mediapipe Hands
        results = hands.process(img_rgb)

        # Check if any hand landmarks were detected
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Collect x and y coordinates of landmarks
                for i in range(len(hand_landmarks.landmark)):
                    x = hand_landmarks.landmark[i].x
                    y = hand_landmarks.landmark[i].y

                    x_.append(x)
                    y_.append(y)

                # Normalize the coordinates by subtracting the min values
                for i in range(len(hand_landmarks.landmark)):
                    x = hand_landmarks.landmark[i].x
                    y = hand_landmarks.landmark[i].y
                    data_aux.append(x - min(x_))
                    data_aux.append(y - min(y_))

            # Append the processed data and label
            data.append(data_aux)
            labels.append(dir_)
        else:
            print(f"No hand landmarks detected in {img_file}. Skipping.")

# Save the processed data to a pickle file
with open('data.pickle', 'wb') as f:
    pickle.dump({'data': data, 'labels': labels}, f)

print("Data processing complete. Saved to data.pickle.")
